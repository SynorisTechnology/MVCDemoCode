//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace REMS.Data
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class REMSDBEntities : DbContext
    {
        public REMSDBEntities()
            : base("name=REMSDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdditionalCharge> AdditionalCharges { get; set; }
        public virtual DbSet<FlatCharge> FlatCharges { get; set; }
        public virtual DbSet<Floor> Floors { get; set; }
        public virtual DbSet<Plan> Plans { get; set; }
        public virtual DbSet<PLC> PLCs { get; set; }
        public virtual DbSet<Flat> Flats { get; set; }
        public virtual DbSet<Error> Errors { get; set; }
        public virtual DbSet<FlatPLC> FlatPLCs { get; set; }
        public virtual DbSet<Project> Projects { get; set; }
        public virtual DbSet<ProjectType> ProjectTypes { get; set; }
        public virtual DbSet<Tower> Towers { get; set; }
        public virtual DbSet<FlatType> FlatTypes { get; set; }
        public virtual DbSet<FlatTypeSize> FlatTypeSizes { get; set; }
        public virtual DbSet<PlanTypeMaster> PlanTypeMasters { get; set; }
        public virtual DbSet<PlanInstallment> PlanInstallments { get; set; }
        public virtual DbSet<Agreement> Agreements { get; set; }
        public virtual DbSet<AssuredReturn> AssuredReturns { get; set; }
        public virtual DbSet<AssuredReturnPayment> AssuredReturnPayments { get; set; }
        public virtual DbSet<BankMaster> BankMasters { get; set; }
        public virtual DbSet<BrokerMaster> BrokerMasters { get; set; }
        public virtual DbSet<BrokerPayment> BrokerPayments { get; set; }
        public virtual DbSet<BrokerToProperty> BrokerToProperties { get; set; }
        public virtual DbSet<CityMaster> CityMasters { get; set; }
        public virtual DbSet<Customer> Customers { get; set; }
        public virtual DbSet<EventMaster> EventMasters { get; set; }
        public virtual DbSet<FlatInstallmentDetail> FlatInstallmentDetails { get; set; }
        public virtual DbSet<LatePayment> LatePayments { get; set; }
        public virtual DbSet<ModuleList> ModuleLists { get; set; }
        public virtual DbSet<Payment> Payments { get; set; }
        public virtual DbSet<PaymentCancel> PaymentCancels { get; set; }
        public virtual DbSet<PaymentOther> PaymentOthers { get; set; }
        public virtual DbSet<PaymentOtherCancel> PaymentOtherCancels { get; set; }
        public virtual DbSet<PaymentRecord> PaymentRecords { get; set; }
        public virtual DbSet<PaymentRefund> PaymentRefunds { get; set; }
        public virtual DbSet<PayServiceTax> PayServiceTaxes { get; set; }
        public virtual DbSet<PropertyRemark> PropertyRemarks { get; set; }
        public virtual DbSet<PropertyTransfer> PropertyTransfers { get; set; }
        public virtual DbSet<RefundProperty> RefundProperties { get; set; }
        public virtual DbSet<ReminderLetter> ReminderLetters { get; set; }
        public virtual DbSet<RoleAccess> RoleAccesses { get; set; }
        public virtual DbSet<TaxMaster> TaxMasters { get; set; }
        public virtual DbSet<UploadAgreement> UploadAgreements { get; set; }
        public virtual DbSet<UserAccess> UserAccesses { get; set; }
        public virtual DbSet<UserProperty> UserProperties { get; set; }
        public virtual DbSet<PayTransferFee> PayTransferFees { get; set; }
        public virtual DbSet<vw_SaleFlat> vw_SaleFlat { get; set; }
        public virtual DbSet<SaleFlat> SaleFlats { get; set; }
    
        public virtual ObjectResult<Rem_GetFlatPlanCharge_Result> Rem_GetFlatPlanCharge(Nullable<int> flatId)
        {
            var flatIdParameter = flatId.HasValue ?
                new ObjectParameter("FlatId", flatId) :
                new ObjectParameter("FlatId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Rem_GetFlatPlanCharge_Result>("Rem_GetFlatPlanCharge", flatIdParameter);
        }
    }
}
